{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "economic-approach",
   "metadata": {},
   "source": [
    "## iminuit example\n",
    "from https://iminuit.readthedocs.io/en/stable/notebooks/basic_tutorial.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "religious-induction",
   "metadata": {},
   "outputs": [],
   "source": [
    "# basic setup of the notebook\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# everything in iminuit is done through the Minuit object, so we import it\n",
    "from iminuit import Minuit\n",
    "\n",
    "# we also need a cost function to fit and import the LeastSquares function\n",
    "from iminuit.cost import LeastSquares\n",
    "\n",
    "# display iminuit version\n",
    "import iminuit\n",
    "print(\"iminuit version:\", iminuit.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rapid-watershed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# our line model, unicode parameter names are supported :)\n",
    "def line(x, α, β):\n",
    "    return α + x * β\n",
    "\n",
    "\n",
    "# generate random toy data with random offsets in y\n",
    "np.random.seed(1)\n",
    "data_x = np.linspace(0, 1, 10)\n",
    "data_yerr = 0.1  # could also be an array\n",
    "data_y = line(data_x, 1, 2) + data_yerr * np.random.randn(len(data_x))\n",
    "\n",
    "# draw toy data\n",
    "plt.errorbar(data_x, data_y, data_yerr, fmt=\"o\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "iraqi-rwanda",
   "metadata": {},
   "outputs": [],
   "source": [
    "# iminuit contains a LeastSquares class to conveniently generate a least-squares cost function.\n",
    "# We will revisit how to write this by hand in a later section.\n",
    "least_squares = LeastSquares(data_x, data_y, data_yerr, line)\n",
    "\n",
    "m = Minuit(least_squares, α=0, β=0)  # starting values for α and β\n",
    "\n",
    "m.migrad()  # finds minimum of least_squares function\n",
    "m.hesse()   # accurately computes uncertainties\n",
    "\n",
    "# draw data and fitted line\n",
    "plt.errorbar(data_x, data_y, data_yerr, fmt=\"o\", label=\"data\")\n",
    "plt.plot(data_x, line(data_x, *m.values), label=\"fit\")\n",
    "\n",
    "# display legend with some fit info\n",
    "fit_info = [\n",
    "    f\"$\\\\chi^2$ / $n_\\\\mathrm{{dof}}$ = {m.fval:.1f} / {len(data_x) - m.nfit}\",\n",
    "]\n",
    "for p, v, e in zip(m.parameters, m.values, m.errors):\n",
    "    fit_info.append(f\"{p} = ${v:.3f} \\\\pm {e:.3f}$\")\n",
    "\n",
    "plt.legend(title=\"\\n\".join(fit_info));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "patient-disease",
   "metadata": {},
   "source": [
    "## SMPL example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "latin-pulse",
   "metadata": {},
   "outputs": [],
   "source": [
    "from smpl import plot\n",
    "from smpl import fit\n",
    "from uncertainties import unumpy as unp\n",
    "y=unp.uarray(data_y,data_yerr)\n",
    "ff = plot.fit(data_x,y , fmt='.', function=line, params=[0,0], sigmas=1,lpos=2)\n",
    "print(\"Chi2 = \",fit.Chi2(data_x,y,line,ff))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "541af997",
   "metadata": {},
   "outputs": [],
   "source": [
    "from smpl import plot\n",
    "from smpl import fit\n",
    "from uncertainties import unumpy as unp\n",
    "y=unp.uarray(data_y,data_yerr)\n",
    "ff = plot.fit(data_x,y , fmt='.', function=line, params=[0,0], sigmas=1,lpos=2,fitter=fit.Fitter.MINUIT_LEASTSQUARES)\n",
    "print(\"Chi2 = \",fit.Chi2(data_x,y,line,ff))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
