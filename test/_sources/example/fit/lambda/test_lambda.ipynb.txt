{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lambda and string fit functions\n",
    "\n",
    "Uses the last of the alphabetical sorted variables as the x-axis value unless xvar is set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from smpl import plot\n",
    "from smpl import stat\n",
    "from smpl import functions as f\n",
    "import uncertainties.unumpy as unp\n",
    "import smpl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x= np.linspace(-5,5,10)\n",
    "y = stat.noisy(np.exp(2*x))+stat.noisy(x)\n",
    "ff = plot.fit(x, y,\"exp(a*x)*phi\" ,xvar=\"a\", fmt='.', label='data', xaxis=\"x in a.u.\",yaxis=\"y in a.u.\",sigmas=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lambda fit does not work with sigma=N, as it needs unp.exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x= np.linspace(-5,5,10)\n",
    "y = stat.noisy(np.exp(2*x))+stat.noisy(x)\n",
    "ff = plot.fit(x, y,lambda x,f_mu,c: unp.exp(x*f_mu)*c , fmt='.', label='data', xaxis=\"x in a.u.\",yaxis=\"y in a.u.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x= np.linspace(-5,5,10)\n",
    "y = stat.noisy(np.exp(2*x))+stat.noisy(x)\n",
    "ff = plot.fit(x, y,lambda x,nu,rho: unp.exp(x*nu)*rho,xvar=\"nu\" , fmt='.', label='data', xaxis=\"$\\\\nu$ in a.u.\",yaxis=\"y in a.u.\",sigmas=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x= np.linspace(-5,5,10)\n",
    "y = stat.noisy(np.exp(2*x))+stat.noisy(x)\n",
    "def e(nu,x,rho):\n",
    "    return unp.exp(x*nu)*rho\n",
    "ff = plot.fit(x, y,e ,xvar=\"x\", fmt='.', label='data', xaxis=\"x in a.u.\",yaxis=\"y in a.u.\",sigmas=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
