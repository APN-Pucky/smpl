{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e9ae6833",
   "metadata": {},
   "source": [
    "# Interpolate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0ae32dc",
   "metadata": {},
   "source": [
    "## Interpolate 1d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97909a53",
   "metadata": {},
   "outputs": [],
   "source": [
    "from smpl import plot\n",
    "from smpl import stat\n",
    "from smpl import data\n",
    "from smpl import interpolate\n",
    "import numpy as np\n",
    "\n",
    "from smpl import interpolate as interp\n",
    "from uncertainties import unumpy as unp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1d7337e",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(2,100,20)\n",
    "y = stat.noisy(x)\n",
    "plot.data(x,y,interpolate=True)\n",
    "plot.show()\n",
    "plot.data(x,y,interpolate=True,also_data=False)\n",
    "plot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e37adb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(2,100,20)\n",
    "y = stat.poisson_dist(stat.noisy(x))\n",
    "plot.data(x,y,interpolate=True,sigmas=1,show=True)\n",
    "plot.data(x,y,interpolate=True,sigmas=1,also_data=False)\n",
    "plot.data(x,y,interpolate=True,sigmas=1,also_data=False,init=False,interpolator='linear')\n",
    "\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da393da0",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(2,100,10)\n",
    "y = np.exp(-stat.noisy(x,std=2))\n",
    "plot.data(x,y,interpolate=True,also_data=False,interpolator='linear',logy=True)\n",
    "plot.data(x,y,interpolate=True,also_data=False,interpolator='exp',logy=True,init=False)\n",
    "\n",
    "\n",
    "f1 = interp.interpolate(x,y,interpolator=\"exp\")\n",
    "\n",
    "f2 = lambda x_ : np.exp(interp.interpolate(x,unp.log(y),interpolator=\"linear\")(x_))\n",
    "x2 = np.linspace(2,100,100)\n",
    "plot.data(x2,f2(x2),logy=True,init=False)\n",
    "plot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "261f739e",
   "metadata": {},
   "source": [
    "## Interpolate 2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "860cf72a",
   "metadata": {},
   "outputs": [],
   "source": [
    "xvalues = np.linspace(-10,10,5)\n",
    "yvalues = np.linspace(-10,10,5)\n",
    "xx, yy = data.flatmesh(xvalues, yvalues)\n",
    "zz=xx**2+yy**2+10*xx+10*yy\n",
    "print(zz)\n",
    "plot.plot2d(xx,yy,zz,fill_missing=False,style='scatter',logz=False)\n",
    "f=interp.interpolate(xx,yy,zz)\n",
    "print(f(xx,yy))\n",
    "xvalues = np.linspace(-10,10,11)\n",
    "yvalues = np.linspace(-10,10,11)\n",
    "xx, yy = data.flatmesh(xvalues, yvalues)\n",
    "plot.plot2d(xx,yy,f(xx,yy),fill_missing=False,style='scatter',logz=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c041d3bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "xvalues = np.linspace(-10,10,10)\n",
    "yvalues = xvalues*2\n",
    "xx = xvalues\n",
    "yy = yvalues\n",
    "xx = np.append(xx,xx)\n",
    "yy = np.append(yy,-yy)\n",
    "zz = xx**2+yy**2\n",
    "f_cub=interp.interpolate(xx,yy,zz)\n",
    "f_lin=interp.interpolate(xx,yy,zz,interpolator='linear')\n",
    "f_lind=interp.interpolate(xx,yy,zz,interpolator='linearnd')\n",
    "f_bi=interp.interpolate(xx,yy,zz,interpolator='bivariatespline')\n",
    "plot.plot2d(xx,yy,xx**2+yy**2,style='scatter',fill_missing=True,logz=False)\n",
    "\n",
    "xvalues = np.linspace(-10,10,11)\n",
    "yvalues = np.linspace(-20,20,11)\n",
    "xx, yy = data.flatmesh(xvalues, yvalues)\n",
    "plot.plot2d(xx,yy,f_cub(xx,yy),fill_missing=False,style='scatter',logz=False)\n",
    "plot.plot2d(xx,yy,f_lin(xx,yy),fill_missing=False,style='scatter',logz=False)\n",
    "plot.plot2d(xx,yy,f_lind(xx,yy),fill_missing=False,style='scatter',logz=False)\n",
    "plot.plot2d(xx,yy,f_bi(xx,yy),fill_missing=False,style='scatter',logz=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "148efafc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
