:py:mod:`smpl.debug`
====================

.. py:module:: smpl.debug

.. autoapi-nested-parse::

   Simplified python debuging.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   debug/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   smpl.debug.file
   smpl.debug.file1
   smpl.debug.get_line_number_file
   smpl.debug.msg
   smpl.debug.msg1
   smpl.debug.once
   smpl.debug.table
   smpl.debug.table_flush_header
   smpl.debug.table_flush_line



.. py:function:: file(key, value, level=0, times=-1, seperator=';', _print=True, _back=0, filename='debug.csv')

   Prints the message ``msg`` if level > debug_level to file ``filename``.


.. py:function:: file1(_key, _value, level=0, times=1, _back=0, **kwargs)

   Just like :func:`file` but ``times`` set to 1.


.. py:function:: get_line_number_file(split=True, _back=0)

   Gets the current filename and the current linenumber within it.

   Parameters
   ----------
   split : bool
       Indicates whenever the folders above of the file should be included in the returned filename.
   _back : int
       Number of stack/frames to go back.

   Returns
   -------
   filenumber : int
       First element in the return array
   filename : str
       Second element in the return array

   Examples
   --------
   >>> get_line_number_file()
   (1, '<doctest smpl.debug.debug.get_line_number_file[0]>')
   >>> for i in range(2):
   ...     get_line_number_file()
   (2, '<doctest smpl.debug.debug.get_line_number_file[1]>')
   (2, '<doctest smpl.debug.debug.get_line_number_file[1]>')


.. py:function:: msg(msg, tag='', level=0, times=-1, line_=False, _back=0, **kwargs)

   Prints the message ``msg`` if level > debug_level and always returns the msg.

   Parameters
   ----------
   tag : str
       Sets a tag to be printed for the debug message.
   level : int
       Debug level.
   times : int
       How often should the message be printed if the function gets called multiple times (e.g. in a loop).
   _line : bool
       Print the current line in the python source.
   _back : int
       Number of stack/frames to go back.

   Examples
   --------
   >>> msg("hi", level = -9999)
   DBG::<doctest smpl.debug.debug.msg[0]>:1: hi
   'hi'
   >>> msg("hi")
   'hi'



.. py:function:: msg1(_msg, tag='', level=0, times=1, line_=False, _back=0, **kwargs)

   Just like :func:`msg` but ``times`` set to 1.

   Parameters
   ----------
   tag : str
       Sets a tag to be printed for the debug message.
   level : int
       Debug level.
   times : int
       How often should the message be printed if the function gets called multiple times (e.g. in a loop).
   _line : bool
       Print the current line in the python source.
   _back : int
       Number of stack/frames to go back.

   Examples
   --------
   >>> for i in range(-2,2):
   ...     msg1(i, level = i)
   DBG::<doctest smpl.debug.debug.msg1[0]>:2: -2
   -2
   -1
   0
   1


.. py:function:: once(_back=0)

   Returns true only one time

   Examples
   --------
   >>> for i in range(10):
   ...     if once():
   ...         print(i)
   0



.. py:function:: table(key, value, level=0, times=-1, seperator=';', _print=False, _back=0, filename='debug_table.csv')

   Saves ``key``:``value`` in ``filename``.

   Examples
   --------
   >>> for i in range(-2,2):
   ...     table("a", i,level=-1)
   ...     table("b", i**2,level=-1)
   ...     table("c", i**i,level=-1)
   ...     if once(): table_flush_header();
   ...     table_flush_line()
   -2
   4
   0.25
   -1
   1
   -1.0
   0
   0
   1
   1
   1
   1
   >>> from smpl import io
   >>> print(io.read("debug_table.csv").strip())
   a;b;c;
   -2.000000000000000000000000000000e+00;4.000000000000000000000000000000e+00;2.500000000000000000000000000000e-01;
   -1.000000000000000000000000000000e+00;1.000000000000000000000000000000e+00;-1.000000000000000000000000000000e+00;
   0.000000000000000000000000000000e+00;0.000000000000000000000000000000e+00;1.000000000000000000000000000000e+00;
   1.000000000000000000000000000000e+00;1.000000000000000000000000000000e+00;1.000000000000000000000000000000e+00;
   >>> import pandas as pd
   >>> pd.read_csv("debug_table.csv")
                                                 a;b;c;
   0  -2.000000000000000000000000000000e+00;4.000000...
   1  -1.000000000000000000000000000000e+00;1.000000...
   2  0.000000000000000000000000000000e+00;0.0000000...
   3  1.000000000000000000000000000000e+00;1.0000000...
   >>> reset_table()
   >>> io.write("debug_table.csv","")
   >>> for i in range(1,3):
   ...     table("a", np.array([i*k for k in range(5)]),level=-1)
   ...     table("b", np.array([i*i*k for k in range(5)]),level=-1)
   ...     if once(): table_flush_header();
   ...     table_flush_line()
   array([0, 1, 2, 3, 4])
   array([0, 1, 2, 3, 4])
   array([0, 2, 4, 6, 8])
   array([ 0,  4,  8, 12, 16])
   >>> print(io.read("debug_table.csv").strip())
   a;b;
   0.000000000000000000000000000000e+00;0.000000000000000000000000000000e+00;
   1.000000000000000000000000000000e+00;1.000000000000000000000000000000e+00;
   2.000000000000000000000000000000e+00;2.000000000000000000000000000000e+00;
   3.000000000000000000000000000000e+00;3.000000000000000000000000000000e+00;
   4.000000000000000000000000000000e+00;4.000000000000000000000000000000e+00;
   0.000000000000000000000000000000e+00;0.000000000000000000000000000000e+00;
   2.000000000000000000000000000000e+00;4.000000000000000000000000000000e+00;
   4.000000000000000000000000000000e+00;8.000000000000000000000000000000e+00;
   6.000000000000000000000000000000e+00;1.200000000000000000000000000000e+01;
   8.000000000000000000000000000000e+00;1.600000000000000000000000000000e+01;


.. py:function:: table_flush_header(filename='debug_table.csv', seperator=';')

   Saves the current keys from :func:`table` to ``filename``.


.. py:function:: table_flush_line(filename='debug_table.csv', seperator=';')

   Saves the current values from :func:`table` to ``filename``


