:py:mod:`smpl.wrap`
===================

.. py:module:: smpl.wrap

.. autoapi-nested-parse::

   Simplified wrapping.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   wrap/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   smpl.wrap.get_lambda
   smpl.wrap.get_lambda_argd
   smpl.wrap.get_latex
   smpl.wrap.get_varnames



.. py:function:: get_lambda(expr, xvar)

   Returns a lambda of given ``str``/``function``/``lambda`` expression with ``__doc__`` set to the latex expression. ``xvar`` is moved to the front.

   Examples
   --------
   >>> l = get_lambda(lambda a,b,c,x : (a+b+c)*x,'x')
   >>> l(4,1,1,1)
   12
   >>> l = get_lambda("(a+b+c)*x",'x')
   >>> l(4,1,1,1)
   12
   >>> def fun(a,b,x,c):
   ...     return (a+b+c)*x
   >>> l = get_lambda(fun,'x')
   >>> l(4,1,1,1)
   12



.. py:function:: get_lambda_argd(expr, xvar, *args)


.. py:function:: get_latex(function)

   Return a latex string for passed function.


   Parameters
   ----------
   function : function_like
       function as str lambda or (oneline) function

   Examples
   --------
   >>> get_latex(lambda a,b,c,x : (a+b+c)*x,)
   '$x \\left(a + b + c\\right)$'
   >>> get_latex("(a+b+c)*x")
   '$x \\left(a + b + c\\right)$'
   >>> def fun(a,b,x,c):
   ...     return (a+b+c)*x
   >>> get_latex(fun)
   '$x \\left(a + b + c\\right)$'



.. py:function:: get_varnames(expr, xvar)

   Returns a list of variables used in the ``str`` math-expression via sympy and puts ``xvar`` to the front.

   Examples
   --------
   >>> get_varnames("a**x*b+c","x")
   ['x', 'a', 'b', 'c']



